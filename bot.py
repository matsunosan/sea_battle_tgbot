from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import logging
from collections import defaultdict, deque
import time
from datetime import datetime
import os

TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')


# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
SEA_EMOJI = 'üåÖ'
USED_CELL_EMOJI = '‚úñÔ∏è'
PRIZE_EMOJI = 'üéÅ'
BOMB_EMOJI = 'üí£'
FIRE_EMOJI = 'üí•'

field = [[SEA_EMOJI for _ in range(10)] for _ in range(10)]
prizes = [['–ù–µ—Ç –ø—Ä–∏–∑–∞' for _ in range(10)] for _ in range(10)]
used_cells = [[False for _ in range(10)] for _ in range(10)]
bomb_cells = [[False for _ in range(10)] for _ in range(10)]
player_shots = defaultdict(int)
admin_password = "+~hy+n828JPE"  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å
admin_chat_id = None

awaiting_shot_coordinates = False
awaiting_edit_coordinates = False
awaiting_prize_text = False
selected_cell = None

COMMAND_LIMIT = 20
COMMAND_TIME_FRAME = 10  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
BLOCK_DURATION = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


command_times = defaultdict(lambda: deque(maxlen=COMMAND_LIMIT))
blocked_users = defaultdict(lambda: 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_blocked(user_id):
    current_time = time.time()
    if current_time < blocked_users[user_id]:
        return True
    times = command_times[user_id]
    if len(times) < COMMAND_LIMIT:
        times.append(current_time)
        return False
    if current_time - times[0] > COMMAND_TIME_FRAME:
        times.append(current_time)
        return False
    blocked_users[user_id] = current_time + BLOCK_DURATION
    return True

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, user, result, coordinates):
    if admin_chat_id:
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=(
                f"–ê–π–¥–∏: {user.id}\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username}\n"
                f"–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {user.full_name}\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
                f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}"
            )
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—è —Å —Å–º–∞–π–ª–∏–∫–∞–º–∏ –Ω–∞ —è—á–µ–π–∫–∞—Ö
def show_field_with_emojis(show_prizes=False, show_bombs=False, check_mode=False) -> str:
    field_str = '‚≠êÔ∏è 1Ô∏è‚É£ 2Ô∏è‚É£ 3Ô∏è‚É£ 4Ô∏è‚É£ 5Ô∏è‚É£ 6Ô∏è‚É£ 7Ô∏è‚É£ 8Ô∏è‚É£ 9Ô∏è‚É£ üîü\n'
    for i in range(10):
        row = f'{chr(65 + i)} '  # –ë—É–∫–≤—ã A-J
        for j in range(10):
            if used_cells[i][j] and prizes[i][j] != '–ù–µ—Ç –ø—Ä–∏–∑–∞':
                row += PRIZE_EMOJI
            elif used_cells[i][j] and field[i][j] == 'üí•':
                row += 'üí•'
            elif used_cells[i][j] and field[i][j] == BOMB_EMOJI:
                row += BOMB_EMOJI
            elif used_cells[i][j]:
                row += USED_CELL_EMOJI
            elif bomb_cells[i][j] and show_bombs:
                row += BOMB_EMOJI
            elif show_prizes and check_mode and prizes[i][j] != '–ù–µ—Ç –ø—Ä–∏–∑–∞':
                row += PRIZE_EMOJI
            elif show_bombs and check_mode and bomb_cells[i][j]:
                row += BOMB_EMOJI
            else:
                row += SEA_EMOJI
            row += ' '
        field_str += row + '\n'
    return field_str


# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if is_user_blocked(user.id):
        if update.message:
            await update.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        elif update.callback_query:
            await update.callback_query.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        return
    if user.id not in player_shots:
        player_shots[user.id] = 0  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ 0
    menu_buttons = [
        [InlineKeyboardButton("–ü—Ä–∞–≤–∏–ª–∞", callback_data='rules'), InlineKeyboardButton("Chat DHL", url='https://t.me/+2aMfTMIUJkg4Nzc0')],
        [InlineKeyboardButton("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", url='https://t.me/DHL_Battle'), InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", url='https://t.me/+N3IM4ooRBV1jYjVk')],
        [InlineKeyboardButton("–ú–æ—Ä—Å–∫–æ–π –ë–æ–π", callback_data='battlefield')]
    ]
    if update.message:
        await update.message.reply_text(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–æ—Ä—Å–∫–æ–π –±–æ–π, {user.first_name}!',
                                        reply_markup=InlineKeyboardMarkup(menu_buttons))
    elif update.callback_query:
        await update.callback_query.message.reply_text(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –ú–æ—Ä—Å–∫–æ–π –±–æ–π, {user.first_name}!',
                                                      reply_markup=InlineKeyboardMarkup(menu_buttons))

async def battlefield(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if is_user_blocked(user.id):
        await update.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        return
    balance_info = f"–ò–≥—Ä–æ–∫: {user.first_name}\n–ë–∞–ª–∞–Ω—Å –≤—ã—Å—Ç—Ä–µ–ª–æ–≤: {player_shots.get(user.id, 0)}"
    battlefield_buttons = [
        [InlineKeyboardButton("–°–æ–≤–µ—Ä—à–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª", callback_data='make_shot')],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    if update.message:
        await update.message.reply_text(f'{balance_info}\n\n–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:\n{show_field_with_emojis()}',
                                        reply_markup=InlineKeyboardMarkup(battlefield_buttons))
    elif update.callback_query:
        await update.callback_query.message.edit_text(f'{balance_info}\n\n–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞:\n{show_field_with_emojis()}',
                                                      reply_markup=InlineKeyboardMarkup(battlefield_buttons))

async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if is_user_blocked(user.id):
        await update.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        return
    rules_text = (
        "üìù –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ Sea Battle:\n\n"
        "–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç 100–∑–ª –∏ –≤—ã—à–µ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä—É–ª–µ—Ç–∫—É.\n\n"
        "–ù–∞ –∫–∞—Ä—Ç–µ —Å–ø—Ä—è—Ç–∞–Ω—ã –ø—Ä–∏–∑—ã, –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–π—Ç–∏ –∏—Ö –∏ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ –º–∏–Ω—ã.\n\n"
        "–í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ª–∞—Ç–∏–Ω—Å–∫–æ–π –±—É–∫–≤–æ–π –∏ —Ü–∏—Ñ—Ä–æ–π –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: F5.\n\n"
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Ä—É–ª–µ—Ç–∫–∏.\n"
        "–û–ø–µ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É!\n\n"
        "üîÅ –ü—Ä–∏–∑—ã –∏ –∏—Ö —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é!\n\n"
        "–ù–∞–ø–æ–º–Ω–∏–º, –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —á–µ–∫ –æ—Ç 100–∑–ª –≤ –∑–∞–∫–∞–∑–µ —ç—Ç–æ ‚Äì 1 —Ö–æ–¥ üéüÔ∏è\n\n"
        "–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –∫–∞–∂–¥–æ–º—É! üçÄ"
    )
    if update.message:
        await update.message.reply_text(rules_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]))
    elif update.callback_query:
        await update.callback_query.message.edit_text(rules_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]))

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if is_user_blocked(user.id):
        await update.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        return
    global admin_chat_id
    if admin_chat_id is None:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.')
        return

    if user.id == admin_chat_id:
        admin_menu_buttons = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤—ã—Å—Ç—Ä–µ–ª—ã", callback_data='add_shots')],
            [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data='edit_map')],
            [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data='clear_map')],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã", callback_data='check_map')],
            [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        if update.message:
            await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!',
                                            reply_markup=InlineKeyboardMarkup(admin_menu_buttons))
        elif update.callback_query:
            await update.callback_query.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!',
                                                          reply_markup=InlineKeyboardMarkup(admin_menu_buttons))
    else:
        await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.')

async def set_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    if is_user_blocked(user.id):
        await update.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        return
    text = update.message.text.split()
    global admin_chat_id
    if len(text) == 2 and text[1] == admin_password:
        admin_chat_id = user.id
        await update.message.reply_text('–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.',
                                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))
    else:
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.')

async def add_shots(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if user.id == admin_chat_id:
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, '12345 5').",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def add_shots_by_id(update: Update, context) -> None:
    user = update.message.from_user
    if is_user_blocked(user.id):
        await update.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        return
    if user.id != admin_chat_id:
        return
    try:
        player_id, shots = map(int, update.message.text.split())
        player_shots[player_id] += shots
        await update.message.reply_text(f"–ò–≥—Ä–æ–∫—É {player_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {shots} –≤—ã—Å—Ç—Ä–µ–ª–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {player_shots[player_id]}.",
                                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, '12345 5').",
                                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def add_prize(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global selected_cell, awaiting_prize_text
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if selected_cell:
        awaiting_prize_text = True
        await update.callback_query.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–∑–∞ –¥–ª—è —è—á–µ–π–∫–∏ ({selected_cell}).',
                                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def save_prize(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global selected_cell, awaiting_prize_text
    user = update.message.from_user
    if is_user_blocked(user.id):
        await update.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        return
    if awaiting_prize_text:
        text = update.message.text
        row = ord(selected_cell[0]) - ord('A')
        col = int(selected_cell[1:]) - 1
        prizes[row][col] = text
        awaiting_prize_text = False
        await update.message.reply_text(f'–ü—Ä–∏–∑ "{text}" –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —è—á–µ–π–∫—É {selected_cell}.',
                                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def remove_prize(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global selected_cell
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if selected_cell:
        row = ord(selected_cell[0]) - ord('A')
        col = int(selected_cell[1:]) - 1
        prizes[row][col] = '–ù–µ—Ç –ø—Ä–∏–∑–∞'
        await update.callback_query.message.edit_text(f'–ü—Ä–∏–∑ —É–¥–∞–ª–µ–Ω —Å —è—á–µ–π–∫–∏ ({selected_cell}).',
                                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def mark_used(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global selected_cell
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if selected_cell:
        row = ord(selected_cell[0]) - ord('A')
        col = int(selected_cell[1:]) - 1
        used_cells[row][col] = True
        await update.callback_query.message.edit_text(f'–Ø—á–µ–π–∫–∞ ({selected_cell}) –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è.',
                                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def mark_free(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global selected_cell
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if selected_cell:
        row = ord(selected_cell[0]) - ord('A')
        col = int(selected_cell[1:]) - 1
        used_cells[row][col] = False
        await update.callback_query.message.edit_text(f'–Ø—á–µ–π–∫–∞ ({selected_cell}) –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω–∞—è.',
                                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def clear_map(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if user.id == admin_chat_id:
        global field, prizes, used_cells, bomb_cells
        field = [[SEA_EMOJI for _ in range(10)] for _ in range(10)]
        prizes = [['–ù–µ—Ç –ø—Ä–∏–∑–∞' for _ in range(10)] for _ in range(10)]
        used_cells = [[False for _ in range(10)] for _ in range(10)]
        bomb_cells = [[False for _ in range(10)] for _ in range(10)]
        await query.message.edit_text('–ö–∞—Ä—Ç–∞ –æ—á–∏—â–µ–Ω–∞.',
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/battlefield - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã\n"
        "/rules - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n"
    )
    await update.message.reply_text(help_text)
async def check_map(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if user.id == admin_chat_id:
        await query.message.edit_text(f'–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã:\n{show_field_with_emojis(show_prizes=True, show_bombs=True, check_mode=True)}',
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def add_bomb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global selected_cell
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if selected_cell:
        row = ord(selected_cell[0]) - ord('A')
        col = int(selected_cell[1:]) - 1
        bomb_cells[row][col] = True
        await update.callback_query.message.edit_text(f'–ë–æ–º–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ —è—á–µ–π–∫—É ({selected_cell}).',
                                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

async def handle_coordinates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global awaiting_shot_coordinates, awaiting_edit_coordinates, selected_cell
    user = update.message.from_user
    if is_user_blocked(user.id):
        await update.message.reply_text('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
        return
    coordinates = update.message.text.strip().upper()

    if len(coordinates) < 2 or len(coordinates) > 3 or not coordinates[0].isalpha() or not coordinates[1:].isdigit():
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1):')
        if awaiting_shot_coordinates:
            awaiting_shot_coordinates = True
        elif awaiting_edit_coordinates:
            awaiting_edit_coordinates = True
        return

    row = ord(coordinates[0]) - ord('A')
    col = int(coordinates[1:]) - 1

    if row < 0 or row >= 10 or col < 0 or col >= 10:
        await update.message.reply_text('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1):')
        if awaiting_shot_coordinates:
            awaiting_shot_coordinates = True
        elif awaiting_edit_coordinates:
            awaiting_edit_coordinates = True
        return

    selected_cell = coordinates

    if awaiting_shot_coordinates:
        awaiting_shot_coordinates = False
        if player_shots[user.id] > 0:
            if used_cells[row][col]:
                await update.message.reply_text('–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:',
                                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]))
                awaiting_shot_coordinates = True
                return

            player_shots[user.id] -= 1
            used_cells[row][col] = True
            image_path = ''
            if bomb_cells[row][col]:
                for i in range(max(0, row - 1), min(10, row + 2)):
                    for j in range(max(0, col - 1), min(10, col + 2)):
                        used_cells[i][j] = True
                        if i == row and j == col:
                            field[i][j] = BOMB_EMOJI
                        else:
                            field[i][j] = 'üí•'
                result_message = f'–í—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ–º–±—É –Ω–∞ —è—á–µ–π–∫–µ ({coordinates}). –í—Å–µ —è—á–µ–π–∫–∏ –≤–æ–∫—Ä—É–≥ —Ç–∞–∫–∂–µ –≤–∑–æ—Ä–≤–∞–Ω—ã!'
                image_path = os.path.join('C:\\Users\\glory hole\\Documents\\seabattlebot\\image', 'bomb_image.jpg')
                await notify_admin(context, user, '–í–∑–æ—Ä–≤–∞–ª –±–æ–º–±—É', coordinates)
            elif prizes[row][col] != '–ù–µ—Ç –ø—Ä–∏–∑–∞':
                field[row][col] = PRIZE_EMOJI
                result_message = f'–í—ã –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ —è—á–µ–π–∫—É ({coordinates}).\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –ø—Ä–∏–∑: {prizes[row][col]}'
                image_path = os.path.join('C:\\Users\\glory hole\\Documents\\seabattlebot\\image', 'prize_image.jpg')
                await notify_admin(context, user, f'–í—ã–∏–≥—Ä–∞–ª –ø—Ä–∏–∑: {prizes[row][col]}', coordinates)
            else:
                result_message = f'–í—ã –≤—ã—Å—Ç—Ä–µ–ª–∏–ª–∏ –≤ —è—á–µ–π–∫—É ({coordinates}).\n–ú–∏–º–æ.'
                image_path = os.path.join('C:\\Users\\glory hole\\Documents\\seabattlebot\\image', 'miss_image.jpg')
                await notify_admin(context, user, '–ú–∏–º–æ', coordinates)
            
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=image_path, caption=f'{result_message}',
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]))
        else:
            await update.message.reply_text('–£ –≤–∞—Å –Ω–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª–æ–≤.', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]))

    if awaiting_edit_coordinates:
        awaiting_edit_coordinates = False
        await update.message.reply_text(f'–í—ã–±—Ä–∞–Ω–∞ —è—á–µ–π–∫–∞ ({coordinates}). –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                                        reply_markup=InlineKeyboardMarkup([
                                            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑", callback_data='add_prize')],
                                            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–æ–º–±—É", callback_data='add_bomb')],
                                            [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —è—á–µ–π–∫—É", callback_data='clear_cell')],
                                            [InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é", callback_data='mark_used')],
                                            [InlineKeyboardButton("–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—É—é", callback_data='mark_free')],
                                            [InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]
                                        ]))




async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    global awaiting_shot_coordinates, awaiting_edit_coordinates, selected_cell
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return

    if query.data == 'make_shot':
        if player_shots[user.id] > 0:
            awaiting_shot_coordinates = True
            await query.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Å—Ç—Ä–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1):',
                                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]))
        else:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤—ã—Å—Ç—Ä–µ–ª–æ–≤!", show_alert=True)

    elif query.data == 'edit_map':
        awaiting_edit_coordinates = True
        await query.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, A1):',
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

    elif query.data == 'rules':
        await rules(update, context)

    elif query.data == 'battlefield':
        await battlefield(update, context)

    elif query.data == 'main_menu':
        await start(update, context)

    elif query.data == 'add_prize':
        await add_prize(update, context)

    elif query.data == 'add_bomb':
        await add_bomb(update, context)

    elif query.data == 'clear_cell':
        await clear_cell(update, context)

    elif query.data == 'mark_used':
        await mark_used(update, context)

    elif query.data == 'mark_free':
        await mark_free(update, context)

    elif query.data == 'admin_panel':
        await admin_panel(update, context)

    elif query.data == 'add_shots':
        await add_shots(update, context)

    elif query.data == 'check_map':
        await check_map(update, context)

    elif query.data == 'clear_map':
        await clear_map(update, context)

    await query.answer()


async def clear_cell(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global selected_cell
    query = update.callback_query
    user = query.from_user
    if is_user_blocked(user.id):
        await query.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 5 –º–∏–Ω—É—Ç –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã.', show_alert=True)
        return
    if selected_cell:
        row = ord(selected_cell[0]) - ord('A')
        col = int(selected_cell[1:]) - 1
        prizes[row][col] = '–ù–µ—Ç –ø—Ä–∏–∑–∞'
        bomb_cells[row][col] = False
        used_cells[row][col] = False
        selected_cell = None
        await query.message.edit_text(f'–Ø—á–µ–π–∫–∞ ({selected_cell}) –æ—á–∏—â–µ–Ω–∞.',
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin_panel')]]))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    application = Application.builder().token("TELEGRAM_BOT_TOKEN").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("battlefield", battlefield))
    application.add_handler(CommandHandler("rules", rules))
    application.add_handler(CommandHandler("admin_panel", admin_panel))
    application.add_handler(CommandHandler("set_admin", set_admin))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^[A-Ja-j][1-9]0?$'), handle_coordinates))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex('^[0-9]+ [0-9]+$'), add_shots_by_id))
    application.add_handler(MessageHandler(filters.TEXT, save_prize))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()
